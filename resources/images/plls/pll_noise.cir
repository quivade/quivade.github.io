.PS

maxpswid = 11

# Stacked labels
define(`stk',
 `ifgpic(\lower0.1in\hbox{)\shortstack`'ifelse(`$2',,,[`$2']){`$1'}ifgpic(})')
 
define(`summer', `[
  circle
  {line from last circle.n to last circle.s
  line from last circle.w to last circle.e}
  C: (last circle.n, last circle.e)
]')

define(`pfd', `[
  period = elen_ / 0.75
  eamp   = elen_ / 4.5
  omega  = twopi_ / period
  ed     = eamp / 6
  ted    = asin(ed / eamp) / twopi_*period

  B: box wid 2 * elen_ ht 2 * elen_
  S1: sinusoid(eamp, omega, -5*pi_ / 6, 0.2 * elen_, 1.8 * elen_) with .Origin at 4/5<B.sw, B.nw>
  S2: sinusoid(eamp, omega, +4*pi_ / 6, 0.2 * elen_, 1.8 * elen_) with .Origin at 1/5<B.sw, B.nw>
  summer with .C at 1/3<B.w,B.e>
  `"$PFD$"' at 2/3<B.w,B.e> ljust
  Ref:  "" at 4/5<B.sw, B.nw>
  Fb:   "" at 1/5<B.sw, B.nw>
  Up:   "" at 4/5<B.se, B.ne>
  Down: "" at 1/5<B.se, B.ne>
]')

define(`cpump', `[
  Source: Here;
    source( down_ 2 / 3 * elen_, I)
    lswitch( 1/3*elen_, , KD)
    {
      "$CP$" rjust
      line right_ 0.5 * elen_
      Out: Here
    }
    lswitch( 1/3*elen_, ,D)
    source( down_ 2 / 3 * elen_, I)
  B: box wid 1 * elen_ ht 2 * elen_ with .n at Source
  Up:   "" at 4/5<B.sw, B.nw>
  Down: "" at 1/5<B.sw, B.nw> 
]')

define(`lpf', `[
  B:  box wid 1.5 * elen_ ht 1 * elen_
  spline from (3/4<B.sw, B.nw> + (0.2*elen_, 0)) right 0.9*elen_ then to ( 1/4<B.se, B.ne> - (0.2*elen_, 0))
  "$LPF$" at B.center
  In:  "" at B.w
  Out: "" at B.e
]')

define(`divn', `[
  B:  box wid 1.5 * elen_ ht 1 * elen_
  "$\div N$" at B.center
  In:   "" at B.e
  Out:  "" at B.w
  Ctrl: "" at B.s
]')

define(`del', `[
  B: box wid 2 * elen_ ht 2 * elen_
  move to B.w + (elen_ / 6, 0)
  amp(right_ 0.63, 0.75); move left_ 0.65*elen_; amp(right_ 0.64, 0.75); move left_ 0.65*elen_; amp(right_ 0.64, 0.75)
  Ref:  "" at 4/5<B.sw, B.nw>
  Fb:   "" at 1/5<B.sw, B.nw>
  Up:   "" at 4/5<B.se, B.ne>
  Down: "" at 1/5<B.se, B.ne>
  Ctrl: "" at B.s
]')

define(`dsm', `[
 B:  box wid 1.5 * elen_ ht 1 * elen_
 "stk($\Delta\Sigma$\\ \em Modulator)" at B.center
 In:  "" at B.w
 Out: "" at B.e
]')

define(`ctrl', `[
 B:  box wid 1.5 * elen_ ht 1 * elen_
 "\em Control" at B.center
 In:   "" at B.w
 Dsm:  "" at B.s
 Div:  "" at B.e
 Del:  "" at B.n
]')

cct_init
  move right_ elen_
  {DEL: del}
  move right_ 2.75*elen_
  {PFD: pfd}
  move right_ 2.75*elen_
  {CP:  cpump}
  move right_ 1.5*elen_
  {LPF: lpf}
  move right_ 2*elen_
  {VCO:  source(right_ elen_,S, 0.75);  variable( , uA, , 1.5 * elen_)}
  {DIV:  divn with .center at PFD.center  - (0, 2*elen_)}
  {CTRL: ctrl with .center at DIV.center  - (1.5*elen_, 1.5*elen_)}
  {DSM:  dsm  with .center at CTRL.center - (1.5*elen_, 1.5*elen_)}
  
  line from DEL.Up   to PFD.Ref
  line from DEL.Down to PFD.Fb
  
  line from PFD.Up   to CP.Up;   "\em Up"   above rjust
  line from PFD.Down to CP.Down; "\em Down" above rjust
  
  line from CP.Out to LPF.In

  line from LPF.Out to VCO.w; "\em Ctrl" above rjust
  line from VCO.e right_; dot
  {arrow right_; "\em Out" above rjust}
  line down Here.y - DIV.In.y then
    to DIV.In
    
  line left from DEL.Ref; "\em Ref" above ljust; line left 0.5*elen_
  XTAL: xtal(down) with .n at Here; ground(,T)
  line left from DEL.Fb; "\em Fb" above ljust;
  corner
  line down DEL.Fb.y - DIV.Out.y then
    to DIV.Out
  
  move to (DEL.Fb.x, CTRL.In.y); move left
  dot
  {line left elen_; "\em Fractional" above ljust}
  {line down CTRL.In.y - DSM.In.y then to DSM.In}
  line to CTRL.In
  
  line from DSM.Out right CTRL.Dsm.x - DSM.Out.x then to CTRL.Dsm
  line from CTRL.Div right DIV.Ctrl.x - CTRL.Div.x then to DIV.Ctrl
  
  line from CTRL.Del up 1.5*elen_ then
    left CTRL.Del.x - DEL.Ctrl.x then
    to DEL.Ctrl
  #ground(,T); xtal(up); corner; line right_ elen_ `"\em Ref"' above ljust
  #PFD: pfd with .Ref at Here;

.PE